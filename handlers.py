# handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import RESOURCE_OPTIONS, TEMPLATE_SHIELD_PATH, TEMPLATE_PAINTING_PATH, PAINTING_COLORS, NEW_PAINTING_IMAGE_SIZES
from utils import process_image, process_shield, process_painting, create_resource_pack, create_zip_file
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –∑–∞–¥–∞—á
executor = ThreadPoolExecutor(max_workers=5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –∏ —Å–µ–º–∞—Ñ–æ—Ä–∞ Painting
painting_semaphore = asyncio.Semaphore(5)
painting_queue = asyncio.Queue()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
async def run_in_executor(func, *args):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(executor, func, *args)

class Form(StatesGroup):
    selected_resource = State()
    pack_name = State()
    waiting_for_image = State()

user_data = {}

def init_user_data(chat_id):
    user_data[chat_id] = {
        "selected_resource": None,
        "images": [],
        "pack_name": None,
        "in_process": False,
        "new_painting_images": {},
        "remaining_files": list(NEW_PAINTING_IMAGE_SIZES.keys()),
        "error_count": 0
    }

async def process_painting_queue():
    while True:
        task = await painting_queue.get()
        chat_id = task['chat_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_data.get(chat_id, {}).get("in_process", False):
            logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è chat_id {chat_id} –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            painting_queue.task_done()
            continue
        
        try:
            async with painting_semaphore:
                await task['message'].answer("üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É Painting –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                
                processed = await run_in_executor(
                    process_painting, task['images'], TEMPLATE_PAINTING_PATH, PAINTING_COLORS
                )
                if processed is None:
                    raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã")
                
                await task['message'].answer("–°–æ–∑–¥–∞–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
                await run_in_executor(
                    create_resource_pack, processed, task['pack_name'], 'painting'
                )
                
                zip_data = await run_in_executor(create_zip_file, task['pack_name'])
                await task['message'].answer_document(
                    BufferedInputFile(zip_data, filename=f"{task['pack_name']}.mcpack"),
                    caption="‚úÖ –í–∞—à —Ä–µ—Å—É—Ä—Å–ø–∞–∫ –≥–æ—Ç–æ–≤!"
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Painting: {e}")
            await task['message'].answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        finally:
            init_user_data(chat_id)
            await task['state'].clear()
            painting_queue.task_done()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    chat_id = message.chat.id
    current_state = await state.get_state()
    if user_data.get(chat_id, {}).get("in_process", False) or current_state is not None:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return
    init_user_data(chat_id)
    keyboard = InlineKeyboardBuilder()
    for resource_name, resource_label in RESOURCE_OPTIONS.items():
        keyboard.button(text=resource_label, callback_data=resource_name)
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(Form.selected_resource)

@router.message(Command("help"))
async def help_command(message: Message):
    help_text = """
üìñ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
[–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Å—É—Ä—Å–ø–∞–∫–æ–≤.](https://x.gd/recommendations)

üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞.
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞.

‚öôÔ∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPEG
- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 4 –ú–ë

üõë –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞:
[–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ](https://x.gd/bugs_bot)

‚ù§Ô∏è‚Äçü©π *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–æ–Ω–∞—Ç–æ–º...:*
[–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–æ–Ω–∞—Ç–æ–º](https://yoomoney.ru/fundraise/17UU7PUVA77.250123)  
_(–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–æ–ª–Ω—Ü–µ–µ–¥)_
    """
    await message.answer(help_text, 
                         parse_mode="Markdown", 
                         disable_web_page_preview=True)

@router.message(Command("cancel"))
async def cancel(message: Message, state: FSMContext):
    chat_id = message.chat.id
    init_user_data(chat_id)
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(Form.selected_resource)
async def select_resource(call: CallbackQuery, state: FSMContext):
    chat_id = call.message.chat.id
    resource = call.data
    user_data[chat_id]["selected_resource"] = resource
    user_data[chat_id]["in_process"] = True
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞:")
    await state.set_state(Form.pack_name)
    await call.answer()

@router.message(Form.pack_name)
async def process_pack_name(message: Message, state: FSMContext):
    chat_id = message.chat.id
    pack_name = message.text.strip()
    if not pack_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    if len(pack_name) > 64:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∞)! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_data[chat_id]["pack_name"] = pack_name
    resource = user_data[chat_id]["selected_resource"]
    if resource == "new_painting":
        await request_next_image(message, state)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        await state.set_state(Form.waiting_for_image)

@router.message(Form.waiting_for_image, F.photo | F.document)
async def handle_image(message: Message, state: FSMContext):
    chat_id = message.chat.id
    resource = user_data[chat_id]["selected_resource"]
    if not user_data[chat_id].get("in_process", False):
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    try:
        file = await message.bot.get_file(
            message.document.file_id if message.document else message.photo[-1].file_id
        )
        downloaded = await message.bot.download_file(file.file_path)
        image_data = downloaded.read()

        if resource == "shield":
            if len(user_data[chat_id]["images"]) >= 2:
                await message.answer("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã! –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                return
            user_data[chat_id]["images"].append(image_data)
            if len(user_data[chat_id]["images"]) < 2:
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            else:
                processed = await run_in_executor(process_shield, *user_data[chat_id]["images"], TEMPLATE_SHIELD_PATH)
                if processed is None:
                    raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —â–∏—Ç–∞")
                await send_resource(message, processed, resource, state)

        elif resource == "painting":
            required = len(PAINTING_COLORS)
            if len(user_data[chat_id]["images"]) >= required:
                await message.answer("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã! –ó–∞–≤–µ—Ä—à–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                return
            user_data[chat_id]["images"].append(image_data)
            if len(user_data[chat_id]["images"]) < required:
                await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {required - len(user_data[chat_id]['images'])}")
            else:
                task = {
                    'chat_id': chat_id,
                    'images': user_data[chat_id]["images"].copy(),
                    'pack_name': user_data[chat_id]["pack_name"],
                    'message': message,
                    'state': state
                }
                await painting_queue.put(task)
                queue_size = painting_queue.qsize()
                current_position = queue_size
                if current_position == 0:
                    await message.answer("üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É.")
                else:
                    await message.answer(f"üö¶ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {current_position}. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è.")

        elif resource == "new_painting":
            if not user_data[chat_id]["remaining_files"]:
                await message.answer("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                return
            current_file = user_data[chat_id]["remaining_files"].pop(0)
            processed = await run_in_executor(process_image, image_data, resource, current_file)
            if processed is None:
                raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {current_file}")
            user_data[chat_id]["new_painting_images"][current_file] = processed
            await request_next_image(message, state)

        else:
            if user_data[chat_id]["images"]:
                await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ! –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                return
            user_data[chat_id]["images"].append(image_data)
            processed = await run_in_executor(process_image, image_data, resource)
            if processed is None:
                raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await send_resource(message, processed, resource, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()
        init_user_data(chat_id)

async def request_next_image(message: Message, state: FSMContext):
    chat_id = message.chat.id
    resource = user_data[chat_id]["selected_resource"]
    if resource == "new_painting":
        required = set(NEW_PAINTING_IMAGE_SIZES.keys())
        uploaded = set(user_data[chat_id]["new_painting_images"].keys())
        if uploaded == required:
            await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await run_in_executor(
                create_resource_pack,
                user_data[chat_id]["new_painting_images"],
                user_data[chat_id]["pack_name"],
                resource
            )
            await send_zip(message)
            init_user_data(chat_id)
            await state.clear()
            return
        next_file = user_data[chat_id]["remaining_files"][0] if user_data[chat_id]["remaining_files"] else None
        if not next_file:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª")
            return
        size = NEW_PAINTING_IMAGE_SIZES[next_file]
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {next_file} ({size[0]}x{size[1]})")
        await state.set_state(Form.waiting_for_image)

@router.message(Form.waiting_for_image)
async def handle_extra_images(message: Message):
    await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")

async def send_resource(message: Message, image_data: bytes, resource_type: str, state: FSMContext):
    chat_id = message.chat.id
    try:
        if not all([user_data[chat_id]["pack_name"], image_data]):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏")
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        await run_in_executor(create_resource_pack, image_data, user_data[chat_id]["pack_name"], resource_type)
        await send_zip(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞: {str(e)}")
    finally:
        init_user_data(chat_id)
        await state.clear()

async def send_zip(message: Message):
    chat_id = message.chat.id
    try:
        zip_data = await run_in_executor(create_zip_file, user_data[chat_id]["pack_name"])
        await message.answer_document(
            BufferedInputFile(zip_data, filename=f"{user_data[chat_id]['pack_name']}.mcpack"),
            caption="‚úÖ –í–∞—à —Ä–µ—Å—É—Ä—Å–ø–∞–∫ –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!")

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@router.startup()
async def on_startup():
    asyncio.create_task(process_painting_queue())
